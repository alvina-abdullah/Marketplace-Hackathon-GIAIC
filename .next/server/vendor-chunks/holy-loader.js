"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/holy-loader";
exports.ids = ["vendor-chunks/holy-loader"];
exports.modules = {

/***/ "(ssr)/./node_modules/holy-loader/dist/index.js":
/*!************************************************!*\
  !*** ./node_modules/holy-loader/dist/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ src_default),\n/* harmony export */   startHolyLoader: () => (/* binding */ startHolyLoader),\n/* harmony export */   stopHolyLoader: () => (/* binding */ stopHolyLoader)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ default,startHolyLoader,stopHolyLoader auto */ var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\n// src/index.tsx\n\n// src/constants.ts\nvar DEFAULTS = {\n    color: \"#59a2ff\",\n    initialPosition: 0.08,\n    height: 4,\n    easing: \"ease\",\n    speed: 200,\n    zIndex: 2147483647,\n    showSpinner: false,\n    boxShadow: void 0,\n    ignoreSearchParams: false,\n    dir: \"ltr\"\n};\nvar START_HOLY_EVENT = \"holy-progress-start\";\nvar STOP_HOLY_EVENT = \"holy-progress-stop\";\n// src/utils.ts\nvar toAbsoluteURL = /* @__PURE__ */ __name((url)=>{\n    return new URL(url, window.location.href).href;\n}, \"toAbsoluteURL\");\nvar isSamePageAnchor = /* @__PURE__ */ __name((currentUrl, newUrl)=>{\n    const current = new URL(toAbsoluteURL(currentUrl));\n    const next = new URL(toAbsoluteURL(newUrl));\n    return current.href.split(\"#\")[0] === next.href.split(\"#\")[0];\n}, \"isSamePageAnchor\");\nvar isSameHost = /* @__PURE__ */ __name((currentUrl, newUrl)=>{\n    const current = new URL(toAbsoluteURL(currentUrl));\n    const next = new URL(toAbsoluteURL(newUrl));\n    return current.hostname.replace(/^www\\./, \"\") === next.hostname.replace(/^www\\./, \"\");\n}, \"isSameHost\");\nvar paramsAreEqual = /* @__PURE__ */ __name((params1, params2)=>Array.from(params1).every(([key, value])=>params2.has(key) && params2.get(key) === value), \"paramsAreEqual\");\nvar hasSameQueryParameters = /* @__PURE__ */ __name((currentUrl, newUrl)=>{\n    const current = new URL(toAbsoluteURL(currentUrl));\n    const next = newUrl instanceof URL ? newUrl : new URL(toAbsoluteURL(newUrl));\n    const currentParams = new URLSearchParams(current.search);\n    const nextParams = new URLSearchParams(next.search);\n    return paramsAreEqual(currentParams, nextParams) && paramsAreEqual(nextParams, currentParams);\n}, \"hasSameQueryParameters\");\nvar isSamePathname = /* @__PURE__ */ __name((currentUrl, newUrl)=>{\n    const current = new URL(toAbsoluteURL(currentUrl));\n    const next = newUrl instanceof URL ? newUrl : new URL(toAbsoluteURL(newUrl));\n    return current.pathname === next.pathname;\n}, \"isSamePathname\");\nvar clamp = /* @__PURE__ */ __name((n, min, max)=>Math.max(min, Math.min(n, max)), \"clamp\");\nvar queue = /* @__PURE__ */ (()=>{\n    const pending = [];\n    const next = /* @__PURE__ */ __name(()=>{\n        const fn = pending.shift();\n        if (fn !== void 0) {\n            fn(next);\n        }\n    }, \"next\");\n    return (fn)=>{\n        pending.push(fn);\n        if (pending.length === 1) {\n            next();\n        }\n    };\n})();\nvar repaintElement = /* @__PURE__ */ __name((obj)=>{\n    void obj.offsetWidth;\n    return obj;\n}, \"repaintElement\");\n// src/HolyProgress.ts\nvar _HolyProgress = class _HolyProgress {\n    /**\n   * Create a HolyProgress instance.\n   * @param {Partial<HolyProgressProps>} [customSettings] - Optional custom settings to override defaults.\n   */ constructor(customSettings){\n        /**\n     * Sets the progress to a specific value.\n     * @private\n     * @param {number} n - The new progress value (0 to 1).\n     * @returns {HolyProgress} The current instance for chaining methods.\n     */ this.setTo = /* @__PURE__ */ __name((n)=>{\n            const isStarted = typeof this.progressN === \"number\";\n            n = clamp(n, this.settings.initialPosition, 1);\n            this.progressN = n === 1 ? null : n;\n            const progressBar = this.getOrCreateBar(!isStarted);\n            if (!progressBar) {\n                return this;\n            }\n            repaintElement(progressBar);\n            queue((next)=>{\n                if (!this.bar) {\n                    return;\n                }\n                Object.assign(this.bar.style, this.barPositionCSS(n), {\n                    transition: `all ${this.settings.speed}ms ${this.settings.easing}`\n                });\n                if (n === 1) {\n                    progressBar.style.transition = \"none\";\n                    progressBar.style.opacity = \"1\";\n                    repaintElement(progressBar);\n                    setTimeout(()=>{\n                        progressBar.style.transition = `all ${this.settings.speed}ms linear`;\n                        progressBar.style.opacity = \"0\";\n                        setTimeout(()=>{\n                            this.removeBarFromDOM();\n                            next();\n                        }, this.settings.speed);\n                        this.removeSpinnerFromDOM();\n                    }, this.settings.speed);\n                } else {\n                    setTimeout(next, this.settings.speed);\n                }\n            });\n            return this;\n        }, \"setTo\");\n        /**\n     * Converts a progress value (0 to 1) into a percentage representation.\n     * Used for calculating the visual width of the progress bar.\n     * @private\n     * @param {number} n - The progress value to convert.\n     * @returns {number} The percentage representation of the progress value.\n     */ this.toBarPercentage = /* @__PURE__ */ __name((n)=>this.settings.dir === \"ltr\" ? (-1 + n) * 100 : (1 - n) * 100, \"toBarPercentage\");\n        /**\n     * Initiates the progress bar's movement. If already started, it continues from the current position.\n     * Automatically handles automatic incrementation ('trickle') if enabled.\n     * @public\n     * @returns {HolyProgress} The current instance for chaining methods.\n     */ this.start = /* @__PURE__ */ __name(()=>{\n            if (this.progressN === null) {\n                this.setTo(0);\n                this.startTrickle();\n                if (this.settings.showSpinner === true) {\n                    this.createSpinner();\n                }\n            }\n            return this;\n        }, \"start\");\n        /**\n     * Performs automatic incrementation of the progress bar.\n     * This function is recursive and continues to increment the progress at intervals defined by `speed`.\n     * @private\n     */ this.startTrickle = /* @__PURE__ */ __name(()=>{\n            const run = /* @__PURE__ */ __name(()=>{\n                if (this.progressN === null) return;\n                this.incrementStatus();\n                setTimeout(run, this.settings.speed);\n            }, \"run\");\n            setTimeout(run, this.settings.speed);\n        }, \"startTrickle\");\n        /**\n     * Completes the progress, moving it to 100%\n     * @public\n     * @returns {HolyProgress} The current instance for chaining methods.\n     */ this.complete = /* @__PURE__ */ __name(()=>this.setTo(1), \"complete\");\n        /**\n     * Calculates an increment value based on the current status of the progress.\n     * This is used to determine the amount of progress to add during automatic incrementation.\n     * @private\n     * @param {number} status - The current progress status.\n     * @returns {number} The calculated increment value.\n     */ this.calculateIncrement = /* @__PURE__ */ __name((status)=>{\n            const base = 0.1;\n            const scale = 5;\n            return base * Math.exp(-scale * status);\n        }, \"calculateIncrement\");\n        /**\n     * Increments the progress bar by a specified amount, or by an amount determined by `calculateIncrement` if not specified.\n     * @private\n     * @param {number} [amount] - The amount to increment the progress bar.\n     * @returns {HolyProgress} The current instance for chaining methods.\n     */ this.incrementStatus = /* @__PURE__ */ __name((amount)=>{\n            if (this.progressN === null) {\n                return this.start();\n            }\n            if (this.progressN > 1) {\n                return this;\n            }\n            if (typeof amount !== \"number\") {\n                amount = this.calculateIncrement(this.progressN);\n            }\n            this.progressN = clamp(this.progressN + amount, 0, 0.994);\n            return this.setTo(this.progressN);\n        }, \"incrementStatus\");\n        /**\n     * Creates and initializes a new progress bar element in the DOM.\n     * It sets up the necessary styles and appends the element to the document body.\n     * @private\n     * @param {boolean} fromStart - Indicates if the bar is created from the start position.\n     * @returns {HTMLElement | null} The created progress bar element, or null if creation fails.\n     */ this.createBar = /* @__PURE__ */ __name((fromStart)=>{\n            var _a, _b;\n            const barContainer = document.createElement(\"div\");\n            barContainer.id = \"holy-progress\";\n            barContainer.style.pointerEvents = \"none\";\n            barContainer.innerHTML = '<div class=\"bar\" role=\"bar\"></div>';\n            this.bar = barContainer.querySelector('[role=\"bar\"]');\n            if (!this.bar) {\n                return null;\n            }\n            const percentage = this.toBarPercentage(fromStart ? 0 : (_a = this.progressN) != null ? _a : 0);\n            this.bar.style.background = this.settings.color;\n            if (typeof this.settings.height === \"number\") {\n                this.bar.style.height = `${this.settings.height}px`;\n            } else {\n                this.bar.style.height = this.settings.height;\n            }\n            this.bar.style.zIndex = this.settings.zIndex.toString();\n            this.bar.style.position = \"fixed\";\n            this.bar.style.width = \"100%\";\n            this.bar.style.top = \"0\";\n            this.bar.style.left = \"0\";\n            this.bar.style.transition = \"all 0 linear\";\n            this.bar.style.transform = `translate3d(${percentage}%,0,0)`;\n            this.bar.style.boxShadow = (_b = this.settings.boxShadow) != null ? _b : \"\";\n            document.body.appendChild(barContainer);\n            return barContainer;\n        }, \"createBar\");\n        /**\n     * Creates and initializes a new spinner element in the DOM.\n     * It sets up the necessary styles and appends the element to the document body.\n     * @private\n     * @returns {void}\n     */ this.createSpinner = /* @__PURE__ */ __name(()=>{\n            if (document.getElementById(\"holy-progress-spinner\") !== null) {\n                return;\n            }\n            const spinner = document.createElement(\"div\");\n            spinner.id = \"holy-progress-spinner\";\n            spinner.style.pointerEvents = \"none\";\n            spinner.style.display = \"block\";\n            spinner.style.position = \"fixed\";\n            spinner.style.zIndex = this.settings.zIndex.toString();\n            spinner.style.top = \"15px\";\n            spinner.style.right = \"15px\";\n            spinner.style.width = \"18px\";\n            spinner.style.height = \"18px\";\n            spinner.style.boxSizing = \"border-box\";\n            spinner.style.border = \"solid 2px transparent\";\n            spinner.style.borderTopColor = this.settings.color;\n            spinner.style.borderLeftColor = this.settings.color;\n            spinner.style.borderRadius = \"50%\";\n            spinner.style.animation = \"holy-progress-spinner 400ms linear infinite\";\n            const keyframes = `\n      @keyframes holy-progress-spinner {\n        0%   { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n    `;\n            const style = document.createElement(\"style\");\n            style.innerHTML = keyframes;\n            spinner.appendChild(style);\n            document.body.appendChild(spinner);\n        }, \"createSpinner\");\n        this.getOrCreateBar = /* @__PURE__ */ __name((fromStart)=>{\n            var _a;\n            return (_a = document.getElementById(\"holy-progress\")) != null ? _a : this.createBar(fromStart);\n        }, \"getOrCreateBar\");\n        this.removeBarFromDOM = /* @__PURE__ */ __name(()=>{\n            var _a;\n            return (_a = document.getElementById(\"holy-progress\")) == null ? void 0 : _a.remove();\n        }, \"removeBarFromDOM\");\n        this.removeSpinnerFromDOM = /* @__PURE__ */ __name(()=>{\n            var _a;\n            return (_a = document.getElementById(\"holy-progress-spinner\")) == null ? void 0 : _a.remove();\n        }, \"removeSpinnerFromDOM\");\n        /**\n     * Determines the most suitable CSS positioning strategy based on browser capabilities.\n     * Checks for transform properties with vendor prefixes and standard un-prefixed properties.\n     * @private\n     * @returns {TransformStrategy} - The optimal CSS positioning strategy ('translate3d', 'translate', or 'margin').\n     */ this.getTransformStrategy = /* @__PURE__ */ __name(()=>{\n            const style = document.body.style;\n            const prefixes = [\n                \"Webkit\",\n                \"Moz\",\n                \"ms\",\n                \"O\",\n                \"\"\n            ];\n            let transformProp = \"\";\n            for(let i = 0; i < prefixes.length; i++){\n                if (`${prefixes[i]}Transform` in style) {\n                    transformProp = prefixes[i];\n                    break;\n                }\n            }\n            if (transformProp !== \"\" && `${transformProp}Perspective` in style) {\n                return \"translate3d\";\n            }\n            if (transformProp !== \"\") {\n                return \"translate\";\n            }\n            return \"margin\";\n        }, \"getTransformStrategy\");\n        /**\n     * Generates the CSS for the progress bar position based on the detected positioning strategy.\n     * Dynamically sets the transform or margin-left properties for the bar's position.\n     * @private\n     * @param {number} n - Position value of the bar, as a number between 0 and 1.\n     * @returns {Object} - CSS styles for the progress bar.\n     */ this.barPositionCSS = /* @__PURE__ */ __name((n)=>{\n            const transformStrategy = this.getTransformStrategy();\n            const barPosition = `${this.toBarPercentage(n)}%`;\n            if (transformStrategy === \"translate3d\") {\n                return {\n                    transform: `translate3d(${barPosition},0,0)`\n                };\n            }\n            if (transformStrategy === \"translate\") {\n                return {\n                    transform: `translate(${barPosition},0)`\n                };\n            }\n            return {\n                marginLeft: barPosition\n            };\n        }, \"barPositionCSS\");\n        this.settings = __spreadValues(__spreadValues({}, DEFAULTS), customSettings);\n        this.progressN = null;\n        this.bar = null;\n    }\n};\n__name(_HolyProgress, \"HolyProgress\");\nvar HolyProgress = _HolyProgress;\n// src/index.tsx\nvar startHolyLoader = /* @__PURE__ */ __name(()=>{\n    document.dispatchEvent(new Event(START_HOLY_EVENT));\n}, \"startHolyLoader\");\nvar stopHolyLoader = /* @__PURE__ */ __name(()=>{\n    document.dispatchEvent(new Event(STOP_HOLY_EVENT));\n}, \"stopHolyLoader\");\nvar HolyLoader = /* @__PURE__ */ __name(({ color = DEFAULTS.color, initialPosition = DEFAULTS.initialPosition, height = DEFAULTS.height, easing = DEFAULTS.easing, speed = DEFAULTS.speed, zIndex = DEFAULTS.zIndex, boxShadow = DEFAULTS.boxShadow, showSpinner = DEFAULTS.showSpinner, ignoreSearchParams = DEFAULTS.ignoreSearchParams, dir = DEFAULTS.dir })=>{\n    const holyProgressRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const startProgress = /* @__PURE__ */ __name(()=>{\n            if (holyProgressRef.current === null) {\n                return;\n            }\n            try {\n                holyProgressRef.current.start();\n            } catch (error) {}\n        }, \"startProgress\");\n        const stopProgress = /* @__PURE__ */ __name(()=>{\n            if (holyProgressRef.current === null) {\n                return;\n            }\n            try {\n                holyProgressRef.current.complete();\n            } catch (error) {}\n        }, \"stopProgress\");\n        let isHistoryPatched = false;\n        const stopProgressOnHistoryUpdate = /* @__PURE__ */ __name(()=>{\n            if (isHistoryPatched) {\n                return;\n            }\n            const originalPushState = history.pushState.bind(history);\n            history.pushState = (...args)=>{\n                const url = args[2];\n                if (url && isSamePathname(window.location.href, url) && (ignoreSearchParams || hasSameQueryParameters(window.location.href, url))) {\n                    originalPushState(...args);\n                    return;\n                }\n                stopProgress();\n                originalPushState(...args);\n            };\n            const originalReplaceState = history.replaceState.bind(history);\n            history.replaceState = (...args)=>{\n                const url = args[2];\n                if (url && isSamePathname(window.location.href, url) && (ignoreSearchParams || hasSameQueryParameters(window.location.href, url))) {\n                    originalReplaceState(...args);\n                    return;\n                }\n                stopProgress();\n                originalReplaceState(...args);\n            };\n            isHistoryPatched = true;\n        }, \"stopProgressOnHistoryUpdate\");\n        const handleClick = /* @__PURE__ */ __name((event)=>{\n            try {\n                const target = event.target;\n                const anchor = target.closest(\"a\");\n                if (anchor === null || anchor.target === \"_blank\" || anchor.hasAttribute(\"download\") || event.ctrlKey || event.metaKey || // Skip if URL points to a different domain\n                !isSameHost(window.location.href, anchor.href) || // Skip if URL is a same-page anchor (href=\"#\", href=\"#top\", etc.).\n                isSamePageAnchor(window.location.href, anchor.href) || // Skip if URL uses a non-http/https protocol (mailto:, tel:, etc.).\n                !toAbsoluteURL(anchor.href).startsWith(\"http\") || // Skip if the URL is the same as the current page\n                isSamePathname(window.location.href, anchor.href) && (ignoreSearchParams || hasSameQueryParameters(window.location.href, anchor.href))) {\n                    return;\n                }\n                startProgress();\n            } catch (error) {\n                stopProgress();\n            }\n        }, \"handleClick\");\n        try {\n            if (holyProgressRef.current === null) {\n                holyProgressRef.current = new HolyProgress({\n                    color,\n                    height,\n                    initialPosition,\n                    easing,\n                    speed,\n                    zIndex,\n                    boxShadow,\n                    showSpinner,\n                    dir\n                });\n            }\n            document.addEventListener(\"click\", handleClick);\n            document.addEventListener(START_HOLY_EVENT, startProgress);\n            document.addEventListener(STOP_HOLY_EVENT, stopProgress);\n            stopProgressOnHistoryUpdate();\n        } catch (error) {}\n        return ()=>{\n            document.removeEventListener(\"click\", handleClick);\n            document.removeEventListener(START_HOLY_EVENT, startProgress);\n            document.removeEventListener(STOP_HOLY_EVENT, stopProgress);\n        };\n    }, [\n        holyProgressRef\n    ]);\n    return null;\n}, \"HolyLoader\");\nvar src_default = HolyLoader;\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/holy-loader/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/holy-loader/dist/index.js":
/*!************************************************!*\
  !*** ./node_modules/holy-loader/dist/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   startHolyLoader: () => (/* binding */ e0),
/* harmony export */   stopHolyLoader: () => (/* binding */ e1)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\PMLS\Desktop\marketplace-hackathon-GIAIC\node_modules\holy-loader\dist\index.js#default`));

const e0 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\PMLS\Desktop\marketplace-hackathon-GIAIC\node_modules\holy-loader\dist\index.js#startHolyLoader`);

const e1 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\PMLS\Desktop\marketplace-hackathon-GIAIC\node_modules\holy-loader\dist\index.js#stopHolyLoader`);


/***/ })

};
;